diff --git a/node_modules/next-auth/core/lib/oauth/client.js b/node_modules/next-auth/core/lib/oauth/client.js
index 7943303..2f3bf44 100644
--- a/node_modules/next-auth/core/lib/oauth/client.js
+++ b/node_modules/next-auth/core/lib/oauth/client.js
@@ -16,9 +16,9 @@ async function openidClient(options) {
     issuer = await _openidClient.Issuer.discover(provider.wellKnown);
   } else {
     var _provider$authorizati, _provider$token, _provider$userinfo;
-
+    var metadata = typeof provider.issuer === "object" ? { ...provider.issuer } : { issuer: provider.issuer };
     issuer = new _openidClient.Issuer({
-      issuer: provider.issuer,
+      ...metadata,
       authorization_endpoint: (_provider$authorizati = provider.authorization) === null || _provider$authorizati === void 0 ? void 0 : _provider$authorizati.url,
       token_endpoint: (_provider$token = provider.token) === null || _provider$token === void 0 ? void 0 : _provider$token.url,
       userinfo_endpoint: (_provider$userinfo = provider.userinfo) === null || _provider$userinfo === void 0 ? void 0 : _provider$userinfo.url
diff --git a/node_modules/next-auth/core/routes/session.js b/node_modules/next-auth/core/routes/session.js
index becc70f..aa48ae1 100644
--- a/node_modules/next-auth/core/routes/session.js
+++ b/node_modules/next-auth/core/routes/session.js
@@ -7,6 +7,8 @@ exports.default = session;
 
 var _utils = require("../lib/utils");
 
+var _jose = require("jose");
+
 async function session(params) {
   const {
     options,
@@ -61,9 +63,7 @@ async function session(params) {
         token,
         maxAge: options.session.maxAge
       });
-      const sessionCookies = sessionStore.chunk(newToken, {
-        expires: newExpires
-      });
+      const sessionCookies = sessionStore.chunk(newToken);
       (_response$cookies = response.cookies) === null || _response$cookies === void 0 ? void 0 : _response$cookies.push(...sessionCookies);
       await ((_events$session = events.session) === null || _events$session === void 0 ? void 0 : _events$session.call(events, {
         session: newSession,
@@ -72,7 +72,7 @@ async function session(params) {
     } catch (error) {
       var _response$cookies2;
 
-      logger.error("JWT_SESSION_ERROR", error);
+      if (!(error instanceof _jose.errors.JWTExpired)) logger.error("JWT_SESSION_ERROR", error);
       (_response$cookies2 = response.cookies) === null || _response$cookies2 === void 0 ? void 0 : _response$cookies2.push(...sessionStore.clean());
     }
   } else {
diff --git a/node_modules/next-auth/providers/oauth.d.ts b/node_modules/next-auth/providers/oauth.d.ts
index f444657..4268ed6 100644
--- a/node_modules/next-auth/providers/oauth.d.ts
+++ b/node_modules/next-auth/providers/oauth.d.ts
@@ -61,7 +61,7 @@ export interface OAuthProviderButtonStyles {
     text: string;
     textDark: string;
 }
-export interface OAuthConfig<P> extends CommonProviderOptions, PartialIssuer {
+export interface OAuthConfig<P> extends CommonProviderOptions {
     /**
      * OpenID Connect (OIDC) compliant providers can configure
      * this instead of `authorize`/`token`/`userinfo` options
@@ -101,7 +101,7 @@ export interface OAuthConfig<P> extends CommonProviderOptions, PartialIssuer {
      */
     idToken?: boolean;
     region?: string;
-    issuer?: string;
+    issuer?: string | IssuerMetadata;
     /** Read more at: https://github.com/panva/node-openid-client/tree/main/docs#customizing-http-requests */
     httpOptions?: HttpOptions;
     style?: OAuthProviderButtonStyles;
diff --git a/node_modules/next-auth/react/index.js b/node_modules/next-auth/react/index.js
index 55764d4..b1b00e9 100644
--- a/node_modules/next-auth/react/index.js
+++ b/node_modules/next-auth/react/index.js
@@ -602,7 +602,7 @@ function SessionProvider(props) {
   React.useEffect(function () {
     if (refetchInterval && shouldRefetch) {
       var refetchIntervalTimer = setInterval(function () {
-        if (__NEXTAUTH._session) {
+        if (__NEXTAUTH._session && document.visibilityState === "visible" && document.hasFocus()) {
           __NEXTAUTH._getSession({
             event: "poll"
           });

/* tslint:disable */
/* eslint-disable */
/**
 * Domain Service
 * Go microservice for Domain management.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EchoHTTPError
 */
export interface EchoHTTPError {
    /**
     * 
     * @type {any}
     * @memberof EchoHTTPError
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface ModelDelegation
 */
export interface ModelDelegation {
    /**
     * 
     * @type {number}
     * @memberof ModelDelegation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelDelegation
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface ModelDelegationRequest
 */
export interface ModelDelegationRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelDelegationRequest
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface ModelDomain
 */
export interface ModelDomain {
    /**
     * 
     * @type {boolean}
     * @memberof ModelDomain
     */
    'approved'?: boolean;
    /**
     * 
     * @type {Array<ModelDelegation>}
     * @memberof ModelDomain
     */
    'delegations'?: Array<ModelDelegation>;
    /**
     * 
     * @type {string}
     * @memberof ModelDomain
     */
    'fqdn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelDomain
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelDomain
     */
    'owner'?: string;
    /**
     * 
     * @type {ModelPermissions}
     * @memberof ModelDomain
     */
    'permissions'?: ModelPermissions;
}
/**
 * 
 * @export
 * @interface ModelDomainRequest
 */
export interface ModelDomainRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelDomainRequest
     */
    'fqdn': string;
}
/**
 * 
 * @export
 * @interface ModelPermissions
 */
export interface ModelPermissions {
    /**
     * 
     * @type {boolean}
     * @memberof ModelPermissions
     */
    'can_approve'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelPermissions
     */
    'can_delegate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelPermissions
     */
    'can_delete'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelPermissions
     */
    'can_transfer'?: boolean;
}
/**
 * 
 * @export
 * @interface ModelTransferRequest
 */
export interface ModelTransferRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelTransferRequest
     */
    'owner': string;
}

/**
 * DomainsApi - axios parameter creator
 * @export
 */
export const DomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists all domains that are either owned or delegated, or a child of a owned or delegated domain.
         * @summary List domains.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domains/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Approves an outstanding domain request
         * @summary Approve domain request
         * @param {number} id Domain ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdApprovePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('domainsIdApprovePost', 'id', id)
            const localVarPath = `/domains/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing delegation.
         * @summary Delete delegation.
         * @param {number} id Domain ID
         * @param {number} delegation Delegation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdDelegationDelegationDelete: async (id: number, delegation: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('domainsIdDelegationDelegationDelete', 'id', id)
            // verify required parameter 'delegation' is not null or undefined
            assertParamExists('domainsIdDelegationDelegationDelete', 'delegation', delegation)
            const localVarPath = `/domains/{id}/delegation/{delegation}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"delegation"}}`, encodeURIComponent(String(delegation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new delegation to an existing domain.
         * @summary Add delegation.
         * @param {number} id Domain ID
         * @param {ModelDelegationRequest} modelDelegationRequest The Delegation to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdDelegationPost: async (id: number, modelDelegationRequest: ModelDelegationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('domainsIdDelegationPost', 'id', id)
            // verify required parameter 'modelDelegationRequest' is not null or undefined
            assertParamExists('domainsIdDelegationPost', 'modelDelegationRequest', modelDelegationRequest)
            const localVarPath = `/domains/{id}/delegation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelDelegationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a domain. Existing certificates are not are not longer accessible.
         * @summary Delete a domain
         * @param {number} id Domain ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('domainsIdDelete', 'id', id)
            const localVarPath = `/domains/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers a domain to a new owner. Transferring is only possible if you are either the owner of the domain itself or responsible for one of the parent zones.
         * @summary Transfer domain
         * @param {number} id Domain ID
         * @param {ModelTransferRequest} modelTransferRequest The Domain to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdTransferPost: async (id: number, modelTransferRequest: ModelTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('domainsIdTransferPost', 'id', id)
            // verify required parameter 'modelTransferRequest' is not null or undefined
            assertParamExists('domainsIdTransferPost', 'modelTransferRequest', modelTransferRequest)
            const localVarPath = `/domains/{id}/transfer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelTransferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new domain if the FQDN is not already taken. Approvement is automatically done, in case the user owns a upper zone or a upper zone was already delegated to him.
         * @summary Create a domain.
         * @param {ModelDomainRequest} modelDomainRequest The Domain to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsPost: async (modelDomainRequest: ModelDomainRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelDomainRequest' is not null or undefined
            assertParamExists('domainsPost', 'modelDomainRequest', modelDomainRequest)
            const localVarPath = `/domains/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelDomainRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainsApi - functional programming interface
 * @export
 */
export const DomainsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists all domains that are either owned or delegated, or a child of a owned or delegated domain.
         * @summary List domains.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelDomain>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Approves an outstanding domain request
         * @summary Approve domain request
         * @param {number} id Domain ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsIdApprovePost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDomain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsIdApprovePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an existing delegation.
         * @summary Delete delegation.
         * @param {number} id Domain ID
         * @param {number} delegation Delegation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsIdDelegationDelegationDelete(id: number, delegation: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDomain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsIdDelegationDelegationDelete(id, delegation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a new delegation to an existing domain.
         * @summary Add delegation.
         * @param {number} id Domain ID
         * @param {ModelDelegationRequest} modelDelegationRequest The Delegation to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsIdDelegationPost(id: number, modelDelegationRequest: ModelDelegationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDomain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsIdDelegationPost(id, modelDelegationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a domain. Existing certificates are not are not longer accessible.
         * @summary Delete a domain
         * @param {number} id Domain ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Transfers a domain to a new owner. Transferring is only possible if you are either the owner of the domain itself or responsible for one of the parent zones.
         * @summary Transfer domain
         * @param {number} id Domain ID
         * @param {ModelTransferRequest} modelTransferRequest The Domain to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsIdTransferPost(id: number, modelTransferRequest: ModelTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDomain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsIdTransferPost(id, modelTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new domain if the FQDN is not already taken. Approvement is automatically done, in case the user owns a upper zone or a upper zone was already delegated to him.
         * @summary Create a domain.
         * @param {ModelDomainRequest} modelDomainRequest The Domain to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainsPost(modelDomainRequest: ModelDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDomain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.domainsPost(modelDomainRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainsApi - factory interface
 * @export
 */
export const DomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainsApiFp(configuration)
    return {
        /**
         * Lists all domains that are either owned or delegated, or a child of a owned or delegated domain.
         * @summary List domains.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsGet(options?: any): AxiosPromise<Array<ModelDomain>> {
            return localVarFp.domainsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Approves an outstanding domain request
         * @summary Approve domain request
         * @param {number} id Domain ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdApprovePost(id: number, options?: any): AxiosPromise<ModelDomain> {
            return localVarFp.domainsIdApprovePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing delegation.
         * @summary Delete delegation.
         * @param {number} id Domain ID
         * @param {number} delegation Delegation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdDelegationDelegationDelete(id: number, delegation: number, options?: any): AxiosPromise<ModelDomain> {
            return localVarFp.domainsIdDelegationDelegationDelete(id, delegation, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new delegation to an existing domain.
         * @summary Add delegation.
         * @param {number} id Domain ID
         * @param {ModelDelegationRequest} modelDelegationRequest The Delegation to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdDelegationPost(id: number, modelDelegationRequest: ModelDelegationRequest, options?: any): AxiosPromise<ModelDomain> {
            return localVarFp.domainsIdDelegationPost(id, modelDelegationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a domain. Existing certificates are not are not longer accessible.
         * @summary Delete a domain
         * @param {number} id Domain ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.domainsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfers a domain to a new owner. Transferring is only possible if you are either the owner of the domain itself or responsible for one of the parent zones.
         * @summary Transfer domain
         * @param {number} id Domain ID
         * @param {ModelTransferRequest} modelTransferRequest The Domain to transfer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsIdTransferPost(id: number, modelTransferRequest: ModelTransferRequest, options?: any): AxiosPromise<ModelDomain> {
            return localVarFp.domainsIdTransferPost(id, modelTransferRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new domain if the FQDN is not already taken. Approvement is automatically done, in case the user owns a upper zone or a upper zone was already delegated to him.
         * @summary Create a domain.
         * @param {ModelDomainRequest} modelDomainRequest The Domain to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsPost(modelDomainRequest: ModelDomainRequest, options?: any): AxiosPromise<ModelDomain> {
            return localVarFp.domainsPost(modelDomainRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainsApi - object-oriented interface
 * @export
 * @class DomainsApi
 * @extends {BaseAPI}
 */
export class DomainsApi extends BaseAPI {
    /**
     * Lists all domains that are either owned or delegated, or a child of a owned or delegated domain.
     * @summary List domains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsGet(options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Approves an outstanding domain request
     * @summary Approve domain request
     * @param {number} id Domain ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsIdApprovePost(id: number, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsIdApprovePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing delegation.
     * @summary Delete delegation.
     * @param {number} id Domain ID
     * @param {number} delegation Delegation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsIdDelegationDelegationDelete(id: number, delegation: number, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsIdDelegationDelegationDelete(id, delegation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new delegation to an existing domain.
     * @summary Add delegation.
     * @param {number} id Domain ID
     * @param {ModelDelegationRequest} modelDelegationRequest The Delegation to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsIdDelegationPost(id: number, modelDelegationRequest: ModelDelegationRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsIdDelegationPost(id, modelDelegationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a domain. Existing certificates are not are not longer accessible.
     * @summary Delete a domain
     * @param {number} id Domain ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsIdDelete(id: number, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfers a domain to a new owner. Transferring is only possible if you are either the owner of the domain itself or responsible for one of the parent zones.
     * @summary Transfer domain
     * @param {number} id Domain ID
     * @param {ModelTransferRequest} modelTransferRequest The Domain to transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsIdTransferPost(id: number, modelTransferRequest: ModelTransferRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsIdTransferPost(id, modelTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new domain if the FQDN is not already taken. Approvement is automatically done, in case the user owns a upper zone or a upper zone was already delegated to him.
     * @summary Create a domain.
     * @param {ModelDomainRequest} modelDomainRequest The Domain to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public domainsPost(modelDomainRequest: ModelDomainRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).domainsPost(modelDomainRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the username of the logged in user
         * @summary whoami Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoamiGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the username of the logged in user
         * @summary whoami Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async whoamiGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.whoamiGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Returns the username of the logged in user
         * @summary whoami Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoamiGet(options?: any): AxiosPromise<string> {
            return localVarFp.whoamiGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Returns the username of the logged in user
     * @summary whoami Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public whoamiGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).whoamiGet(options).then((request) => request(this.axios, this.basePath));
    }
}


